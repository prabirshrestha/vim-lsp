*vim-lsp.txt*  Async Language Server Protocol (LSP) for Vim 8 and Neovim.
*vim-lsp*

================================================================================
CONTENTS                                                  *vim-lsp-contents*

    Introduction        |vim-lsp-introduction|
    Install             |vim-lsp-install|
    Language Servers    |vim-lsp-language-servers|
      Configure           |vim-lsp-configure-source|
      Wiki		   |vim-lsp-configure-wiki|
    Functions           |vim-lsp-functions|
      register_server	   |vim-lsp-register_server|
      stop_server     	   |vim-lsp-stop_server|
    License             |vim-lsp-license|


================================================================================
INTRODUCTION                                          *vim-lsp-introduction*

Async Language Server Protocol (LSP) for Vim 8 and Neovim.

For more information on LSP refer to the official website at
https://microsoft.github.io/language-server-protocol/

================================================================================
INSTALL                                                    *vim-lsp-install*

Install the async.vim and vim-lsp plugins. Below is a sample using plug.vim

    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/vim-lsp'

Note:  async.vim (https://github.com/prabirshrestha/async.vim) is required to
use vim-lsp. It is used to normalize the jobs api between Vim 8 and Neovim.

===============================================================================
LANGUAGE SERVERS                                 *vim-lsp-language-servers*

CONFIGURE                                               *vim-lsp-configure*
vim-lsp doesn't ship with any language servers. The user is responsible for
configuring the language servers correctly.

Here is an example of configuring the python language server protocol based
on pyls (https://github.com/palantir/python-language-server)

1. Make sure the language server is available locally in the machine.
   For python, pip package manager can be used to install the language server.

	pip install python-language-server

2. Register the language server in your .vimrc

	if (exectuable('pyls'))
	    au User lsp_setup call lsp#register_server({
		\ 'name': 'pyls',
		\ 'cmd': {server_info->['pyls']},
		\ 'whitelist': ['python']
		\ })
	endif

    For more details refer to |vim-lsp-register_server|.

WIKI                                               *vim-lsp-configure-wiki*
For documentation on how to configure other language servers refer
to https://github.com/prabirshrestha/vim-lsp/wiki/Servers

===============================================================================
FUNCTIONS	                                        *vim-lsp-functions*

lsp#register_server                               *vim-lsp-register_server*

Used to register the language server with vim-lsp. This method takes
one parameter which is a vim |dict| and is refered to as |vim-lsp-server-info|

    Example:
	if (executable('pyls'))
	    au User lsp_setup call lsp#register_server({
		\ 'name': 'name-of-server',
		\ 'cmd': {server_info->['server-exectuable']},
		\ 'whitelist': ['filetype to whitelist'],
		\ 'blacklist': ['filetype to blacklist'],
		\ 'config': {},
		\ })
	endif

    Note:
	* checking for executable is optional but can be used to avoid
	  unnecessary server registration.
	* au User lsp_setup is optional and used to delay registering the
	  language server after .vimrc has been loaded. It is recommended
	  to use it if possible.

server_info			                      *vim-lsp-server_info*
The vim |dict| containing information about the server.

    {
	'name': 'name of the server',
	'cmd': {server_info->['server_executable']},
	'whitelist': ['filetype'],
	'blacklist': ['filetype'],
	'config': {},
    }

 * name:
    required
    Name of the language server. Needs to be unique.

 * cmd:
    required
    Function that takes |vim-lsp-server_info| as parameter and returns the
    language server executable to run along with the appropriate arguments
    when the appropriate filetype is loaded. This function will only be
    called when the server has not started.
    Return empty array to ignore starting the server.

    Function can be complex based on custom requirements.
    For example:
	- Use binary from local node_modules folder instead of a global
	  node_modules folder.
	- Use different executable based on custom config.
	- Return empty array to ignore starting server due to missing
	  config value required by the server (ex: missing package.json)
	- Instead of checking for server executable before calling
	  register_server it can also be checked here.

    Cross-platform compatibility notes:
    It is recommended to use &shell with &shellcmdflag when running script
    files that can be executed specially on windows where *.bat and *.cmd
    files cannot be started without running the shell first. This is a common
    for exectuables installed by npm for nodejs.

    Example:
	'cmd': {server_info->
	    \ [&shell, &shellcmdflag, 'typescript-language-server', '--stdio']}

 * whitelist:
    optional
    String array of filetypes to run the language server.

    Example:
	'whitelist': ['javascript', 'typescript']

    '*' is treated as any filetype.

 * blacklist:
    optional
    String array of filetypes to run the language server.

    Example:
	'blacklist': ['javascript', 'typescript']

    '*' is treated as any filetype.

    whitelist and blacklist can be used together. The following example
    says to run the language server for all filetypes except javascript
    and typescript. blacklist always takes higher priority over whitelist.

	'whitelist': ['*']
	'blacklist': ['javascript', 'typescript']

  * config:
    optional vim |dict|
    Used to pass additional custom config.

    For example:
	'config': { 'prefer_local': 1 }

	This can then be used by cmd function.

	    function! s:myserver_cmd(server_info) abort
		let l:config = get(a:server_info, 'config', {})
		let l:prefer_local = get(l:config, 'prefer_local', 1)
		if (l:prefer_local)
		    " return ['./local-executable']
		else
		    " return ['/bin/global-exectuable']
		endif
	    endfunction

	    'cmd': function('s:myserver_cmd')

lsp#stop_server                                        *vim-lsp-stop_server*

Used to stop the server.

    Example:
	call lsp#stop_server('name-of-server')

    Note:
	* If the server is not running or is not registered it is a noop.
	* The server is forcefully stopped without sending shutdown request.


===============================================================================
License                                                    *vim-lsp-license*

The MIT License (MIT)

Full license text: https://github.com/prabirshrestha/vim-lsp/blob/master/LICENSE

vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
