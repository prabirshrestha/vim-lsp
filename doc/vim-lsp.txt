*vim-lsp.txt*  Async Language Server Protocol (LSP) for Vim 8 and Neovim.
*vim-lsp*

================================================================================
CONTENTS                                                  *vim-lsp-contents*

    Introduction                          |vim-lsp-introduction|
    Install                               |vim-lsp-install|
    Language Servers                      |vim-lsp-language-servers|
      Configure                             |vim-lsp-configure-source|
      Wiki                                  |vim-lsp-configure-wiki|
    Options                               |vim-lsp-options|
      g:lsp_diagnostics_enabled             |g:lsp_diagnostics_enabled|
      g:lsp_auto_enable                     |g:lsp_auto_enable|
      g:lsp_preview_keep_focus              |g:lsp_preview_keep_focus|
      g:lsp_insert_text_enabled             |g:lsp_insert_text_enabled|
      g:lsp_text_edit_enabled               |g:lsp_text_edit_enabled|
      g:lsp_diagnostics_echo_cursor         |g:lsp_diagnostics_echo_cursor|
      g:lsp_signs_enabled                   |g:lsp_signs_enabled|
      g:lsp_virtual_text_enabled            |g:lsp_virtual_text_enabled|
      g:lsp_highlights_enabled              |g:lsp_highlights_enabled|
      g:lsp_textprop_enabled                |g:lsp_textprop_enabled|
      g:lsp_use_event_queue                 |g:lsp_use_event_queue|
      g:lsp_highlight_references_enabled    |g:lsp_highlight_references_enabled|
    Functions                             |vim-lsp-functions|
      enable                                |vim-lsp-enable|
      disable                               |vim-lsp-disable|
      register_server                       |vim-lsp-register_server|
      stop_server                           |vim-lsp-stop_server|
      utils#find_nearest_parent_file_directory
                              |vim-lsp-utils-find_nearest_parent_file_directory|
    Commands                              |vim-lsp-commands|
      LspCodeAction                         |LspCodeAction|
      LspDocumentDiagnostics                |LspDocumentDiagnostics|
      LspDeclaration                        |LspDeclaration|
      LspDefinition                         |LspDefinition|
      LspDocumentFormat                     |LspDocumentFormat|
      LspDocumentFormatSync                 |LspDocumentFormatSync|
      LspDocumentRangeFormat                |LspDocumentRangeFormat|
      LspDocumentSymbol                     |LspDocumentSymbol|
      LspHover                              |LspHover|
      LspNextError                          |LspNextError|
      LspNextReference                      |LspNextReference|
      LspPreviousError                      |LspPreviousError|
      LspPreviousReference                  |LspPreviousReference|
      LspImplementation                     |LspImplementation|
      LspReferences                         |LspReferences|
      LspRename                             |LspRename|
      LspTypeDefinition                     |LspTypeDefinition|
      LspWorkspaceSymbol                    |LspWorkspaceSymbol|
    Mappings                              |vim-lsp-mappings|
    Autocomplete                          |vim-lsp-autocomplete|
      omnifunc                              |vim-lsp-omnifunc|
      asyncomplete.vim                      |vim-lsp-asyncomplete|
    License                               |vim-lsp-license|


================================================================================
INTRODUCTION                                          *vim-lsp-introduction*

Async Language Server Protocol (LSP) for Vim 8 and Neovim.

For more information on LSP refer to the official website at
https://microsoft.github.io/language-server-protocol/

================================================================================
INSTALL                                                    *vim-lsp-install*

Install the async.vim and vim-lsp plugins. Below is a sample using plug.vim

    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/vim-lsp'

Note:  async.vim (https://github.com/prabirshrestha/async.vim) is required to
use vim-lsp. It is used to normalize the jobs api between Vim 8 and Neovim.

===============================================================================
LANGUAGE SERVERS                                 *vim-lsp-language-servers*

CONFIGURE                                               *vim-lsp-configure*
vim-lsp doesn't ship with any language servers. The user is responsible for
configuring the language servers correctly.

Here is an example of configuring the python language server protocol based
on pyls (https://github.com/palantir/python-language-server)

1. Make sure the language server is available locally in the machine.
   For python, pip package manager can be used to install the language server.

	pip install python-language-server

2. Register the language server in your .vimrc

	if (executable('pyls'))
	    au User lsp_setup call lsp#register_server({
		\ 'name': 'pyls',
		\ 'cmd': {server_info->['pyls']},
		\ 'whitelist': ['python']
		\ })
	endif

    For more details refer to |vim-lsp-register_server|.

WIKI                                               *vim-lsp-configure-wiki*
For documentation on how to configure other language servers refer
to https://github.com/prabirshrestha/vim-lsp/wiki/Servers

===============================================================================
Options                                                   *vim-lsp-options*

g:lsp_diagnostics_enabled                       *g:lsp_diagnostics_enabled*
    Type: |Number|
    Default: `1`

    Enable support for document diagnostics like warnings and error messages.
    enabling vim-lsp during startup. Refer to |g:lsp_signs_enabled| to enable
    signs column.

    Example:
	let g:lsp_diagnostics_enabled = 1
	let g:lsp_diagnostics_enabled = 0

g:lsp_auto_enable                                       *g:lsp_auto_enable*
    Type: |Number|
    Default: `1`

    Auto enable vim-lsp plugin during startup. Set to `0` to disable auto
    enabling vim-lsp during startup.

    Example:
	let g:lsp_auto_enable = 1
	let g:lsp_auto_enable = 0

g:lsp_preview_keep_focus                         *g:lsp_preview_keep_focus*
    Type: |Number|
    Default: `1`

    Indicates whether to keep the focus on current window or move the focus
    to the |preview-window| when a |preview-window| is opened by vim-lsp.
    Certain commands such as |LspHover| opens the result in a |preview-window|.

    Example:
	" Keep the focus in current window
	let g:lsp_preview_keep_focus = 1

	" Do not keep the focus in current window.
	" Move the focus to |preview-window|.
	let g:lsp_preview_keep_focus = 0

    * |preview-window| can be closed using the default vim mapping - `<c-w><c-z>`.

g:lsp_insert_text_enabled                       *g:lsp_insert_text_enabled*
    Type: |Number|
    Default: `1`

    Enable support for completion insertText property. Set to `0` to disable
    using insertText.

    Example:
	let g:lsp_insert_text_enabled = 1
	let g:lsp_insert_text_enabled = 0

g:lsp_text_edit_enabled                              *g:lsp_text_edit_enabled*
    Type: |Number|
    Default: `1`

    Enable support for completion textEdit property. Set to `0` to disable
    using textEdit.

    Example:
	let g:lsp_text_edit_enabled = 1
	let g:lsp_text_edit_enabled = 0

g:lsp_diagnostics_echo_cursor                         *g:lsp_diagnostics_echo_cursor*
    Type: |Number|
    Default: `0`

    Enables echo of diagnostic error for the current line to status. Requires
    |lsp_diagnostics_enabled| set to 1.

    Example:
	let g:lsp_diagnostics_echo_cursor = 1
	let g:lsp_diagnostics_echo_cursor = 0

g:lsp_signs_enabled                                   *g:lsp_signs_enabled*
    Type: |Number|
    Default: `1` for vim/neovim with patch 8.1.0772

    Enables signs for diagnostics. Requires patch 8.1.0772 and
    |lsp_diagnostics_enabled| set to 1.

    Example:
	let g:lsp_signs_enabled = 1
	let g:lsp_signs_enabled = 0

g:lsp_virtual_text_enabled                            *g:lsp_virtual_text_enabled*
    Type: |Number|
    Default: `1` for neovim 0.3+

    Enables virtual text to be shown next to diagnostic errors. Requires
    NeoVim with version 0.3 or newer.

    Example:
>
	let g:lsp_virtual_text_enabled = 1
	let g:lsp_virtual_text_enabled = 0
<

g:lsp_highlights_enabled                         *g:lsp_highlights_enabled*
    Type: |Number|
    Default: `1` for neovim 0.3+

    Enables highlighting of diagnostics. Requires NeoVim with version 0.3 or
    newer.

    Example:
>
	let g:lsp_highlights_enabled = 1
	let g:lsp_highlights_enabled = 0
<

    To change the style of the highlighting, you can set or link
    `LspErrorHighlight`, `LspWarningHighlight`, `LspInformationHighlight` and
    `LspHintHighlight` highlight groups.

    Example:
>
	highlight link LspErrorHighlight Error
<

g:lsp_textprop_enabled                             *g:lsp_textprop_enabled*
    Type: |Number|
    Default: `1` for vim with +textprop

    Enables highlighting of diagnostics. Requires vim with +textprop
    (patch 8.1.0579).

    Example:
>
	let g:lsp_textprop_enabled = 1
	let g:lsp_textprop_enabled = 0
<

    To change the style of the highlighting, you can set or link
    `LspErrorHighlight`, `LspWarningHighlight`, `LspInformationHighlight` and
    `LspHintHighlight` highlight groups.

    Example:
>
	highlight LspErrorHighlight term=underline cterm=underline gui=underline
<

g:lsp_use_event_queue                               *g:lsp_use_event_queue*
    Type: |Number|
    Default: `1` for neovim or vim with patch-8.1.0889

    Enable event queue which improves performance by reducing the communication
    between client and server.

    Example:
	let g:lsp_use_event_queue = 1
	let g:lsp_use_event_queue = 0

g:lsp_highlight_references_enabled         *g:lsp_highlight_references_enabled*
    Type: |Number|
    Default: `1`

    Enable highlighting of the references to the symbol under the cursor.

    Example:
>
    let g:lsp_highlight_references_enabled = 1
    let g:lsp_highlight_references_enabled = 0
<

    To change the style of the highlighting, you can set or link the `lspReference`
    highlight group.

    Example:
>
    highlight lspReference ctermfg=red guifg=red ctermbg=green guibg=green
<

===============================================================================
FUNCTIONS	                                        *vim-lsp-functions*

lsp#enable                                                 *vim-lsp-enable*

Enables vim-lsp plugin.

    Example:
	:call lsp#enable()

lsp#disable                                               *vim-lsp-disable*

Disables vim-lsp plugin.

    Example:
	:call lsp#disable()

lsp#register_server                               *vim-lsp-register_server*

Used to register the language server with vim-lsp. This method takes
one parameter which is a vim |dict| and is refered to as |vim-lsp-server-info|

    Example:
	if (executable('pyls'))
	    au User lsp_setup call lsp#register_server({
		\ 'name': 'name-of-server',
		\ 'cmd': {server_info->['server-exectuable']},
		\ 'whitelist': ['filetype to whitelist'],
		\ 'blacklist': ['filetype to blacklist'],
		\ 'config': {},
		\ 'workspace_config': {'param': {'enabled': v:true}},
		\ })
	endif

    Note:
	* checking for executable is optional but can be used to avoid
	  unnecessary server registration.
	* au User lsp_setup is optional and used to delay registering the
	  language server after .vimrc has been loaded. It is recommended
	  to use it if possible.

server_info			                      *vim-lsp-server_info*
The vim |dict| containing information about the server.

    {
	'name': 'name of the server',
	'cmd': {server_info->['server_executable']},
	'whitelist': ['filetype'],
	'blacklist': ['filetype'],
	'config': {},
	'workspace_config': {},
    }

 * name:
    required
    Name of the language server. Needs to be unique.

 * cmd:
    required
    Function or array which represents command line to start the language
    server.

    When function, it takes |vim-lsp-server_info| as parameter and returns the
    language server executable to run along with the appropriate arguments
    when the appropriate filetype is loaded. This function will only be
    called when the server has not started.
    Return empty array to ignore starting the server.

    When array, the first element is the language server executable and
    the rest are the appropriate arguments. It is useful when the command line
    can be determined statically and |vim-lsp-server_info| is not necessary.

    Example:
	'cmd': ['pyls']

    Function can be complex based on custom requirements.
    For example:
	- Use binary from local node_modules folder instead of a global
	  node_modules folder.
	- Use different executable based on custom config.
	- Return empty array to ignore starting server due to missing
	  config value required by the server (ex: missing package.json)
	- Instead of checking for server executable before calling
	  register_server it can also be checked here.

    Cross-platform compatibility notes:
    It is recommended to use &shell with &shellcmdflag when running script
    files that can be executed specially on windows where *.bat and *.cmd
    files cannot be started without running the shell first. This is common
    for exectuables installed by npm for nodejs.

    Example:
	'cmd': {server_info->
	    \ [&shell, &shellcmdflag, 'typescript-language-server --stdio']}

 * whitelist:
    optional
    String array of filetypes to run the language server.

    Example:
	'whitelist': ['javascript', 'typescript']

    '*' is treated as any filetype.

 * blacklist:
    optional
    String array of filetypes to run the language server.

    Example:
	'blacklist': ['javascript', 'typescript']

    '*' is treated as any filetype.

    whitelist and blacklist can be used together. The following example
    says to run the language server for all filetypes except javascript
    and typescript. blacklist always takes higher priority over whitelist.

	'whitelist': ['*']
	'blacklist': ['javascript', 'typescript']

  * config:
    optional vim |dict|
    Used to pass additional custom config.

    For example:
	'config': { 'prefer_local': 1 }

	This can then be used by cmd function.

	    function! s:myserver_cmd(server_info) abort
		let l:config = get(a:server_info, 'config', {})
		let l:prefer_local = get(l:config, 'prefer_local', 1)
		if (l:prefer_local)
		    return ['./local-executable']
		else
		    return ['/bin/global-exectuable']
		endif
	    endfunction

	    'cmd': function('s:myserver_cmd')

  * workspace_config:
    optional vim |dict|
    Used to pass workspace configuration to the server after
    initialization. Configuration settings are language-server specific.

    Example:
	'workspace_config': {'pyls': {'plugins': \
		{'pydocstyle': {'enabled': v:true}}}}


lsp#stop_server                                        *vim-lsp-stop_server*

Used to stop the server.

    Example:
	call lsp#stop_server('name-of-server')

    Note:
	* If the server is not running or is not registered it is a noop.
	* The server is forcefully stopped without sending shutdown request.

lsp#get_server_status                                  *vim-lsp-get_server_status*

Get the status of a server.


    Example:
  call lsp#get_server_status('name-of-server')

    Returns one of "unknown server", " "exited", "starting", "failed",
    "running", "not running".

			 *vim-lsp-utils-find_nearest_parent_file_directory*
utils#find_nearest_parent_file_directory            

Find the nearest parent directory which contains the specific files or 
diretories. The method has two parameters. The first is the path where 
searching starts. The second is the files or directories names which 
you want to find. The return value is the directory path which is found 
the most times.
This method is mainly used to generate 'root_uri' when registering server.

    Example:
	if executable('ccls')
	    au User lsp_setup call lsp#register_server({
		\ 'name': 'ccls',
		\ 'cmd': {server_info->['ccls']},
		\ 'root_uri':{server_info->lsp#utils#path_to_uri(
		\	lsp#utils#find_nearest_parent_file_directory(
		\		lsp#utils#get_buffer_path(), 
		\		['.ccls', 'compile_commands.json', '.git/']
		\	))},
		\ 'initialization_options': {},
		\ 'whitelist': ['c', 'cpp', 'objc', 'objcpp', 'cc'],
		\ })
	endif
    Note:
	* The second parameter can be a |String| or a string |List|.
	* For the second parameter, the string ends with '/' or '\' will
	  be regarded as a directory name, otherwise as a file name.
	* If there is not directory with the specific files or diretories
	  found, the method will return an empty string.

===============================================================================
Commands	                                          *vim-lsp-commands*

LspCodeAction                                                *LspCodeAction*

Gets a list of possible commands that can be applied to a file so it can be
fixed (quick fix).

LspDocumentDiagnostics                              *LspDocumentDiagnostics*

Gets the current document diagnostics.

LspDeclaration						    *LspDeclaration*

Go to declaration. Useful for languages such as C/C++ where there is a clear
distinction between declaration and definition.

LspDefinition						     *LspDefinition*

Go to definition.

LspDocumentFormat					 *LspDocumentFormat*

Format the entire document.

LspDocumentFormatSync				     *LspDocumentFormatSync*

Same as |LspDocumentFormat| but synchronous. Useful when running |autocmd|
commands such as formatting before save.

    Example:
        autocmd BufWritePre <buffer> LspDocumentFormatSync

Note that this may slow down vim.

LspDocumentRangeFormat				    *LspDocumentRangeFormat*

Format the current document selection.

LspDocumentSymbol				         *LspDocumentSymbol*

Gets the symbols for the current document.

LspHover							  *LspHover*

Gets the hover information and displays it in the |preview-window|.

 * |preview-window| can be closed using the default vim mapping - `<c-w><c-z>`.
 * To control the default focus of |preview-window| for |LspHover|
   configure |g:lsp_preview_keep_focus|.


LspNextError						     *LspNextError*

Jump to Next err diagnostics

LspNextReference                                          *LspNextReference*

Jump to the next reference of the symbol under cursor.

LspPreviousError					 *LspPreviousError*

Jump to Previous err diagnostics

LspPreviousReference                                  *LspPreviousReference*

Jump to the previous reference of the symbol under cursor.

LspImplementation                                        *LspImplementation*

Find all implementation of interface.

LspReferences						     *LspReferences*

Find all references.

LspRename						         *LspRename*

Rename the symbol.

LspTypeDefinition				  	 *LspTypeDefinition*

Go to the type definition.

LspWorkspaceSymbol					*LspWorkspaceSymbol*

Search and show workspace symbols.

LspStatus                                                        *LspStatus*

Prints the status of all registered servers.

===============================================================================
Mappings	                                          *vim-lsp-mappings*

To map keys to the feature of vim-lsp, use <plug> mappings:
>
  autocmd FileType python,go nmap gd <plug>(lsp-definition)
<
Available plug mappings are following:

  (lsp-code-action)
  (lsp-declaration)
  (lsp-definition)
  (lsp-document-symbol)
  (lsp-document-diagnostics)
  (lsp-hover)
  (lsp-next-error)
  (lsp-next-reference)
  (lsp-previous-error)
  (lsp-previous-reference)
  (lsp-references)
  (lsp-rename)
  (lsp-workspace-symbol)
  (lsp-document-format)
  (lsp-document-format)
  (lsp-implementation)
  (lsp-type-definition)
  (lsp-status)

See also |vim-lsp-commands|

===============================================================================
Autocomplete                                          *vim-lsp-autocomplete*

omnifunc				                  *vim-lsp-omnifunc*

vim-lsp by default only provides basic omnifunc support for autocomplete.

Completion can be made asynchronous by setting g:lsp_async_completion.
Note that this may cause unexpected behavior in some plugins such as MUcomplete.

If you would like to have more advanced features please use asyncomplete.vim as
described below.

    Example:
	autocmd FileType typescript setlocal omnifunc=lsp#complete

asyncomplete.vim                                      *vim-lsp-asyncomplete*

asyncomplete.vim is a async auto complete plugin for vim8 and neovim written
in pure vim script. https://github.com/prabirshrestha/asyncomplete.vim

Example:
    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'

For additional configuration refer to asyncomplete.vim docs.

===============================================================================
License                                                    *vim-lsp-license*

The MIT License (MIT)

Full license text: https://github.com/prabirshrestha/vim-lsp/blob/master/LICENSE

vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
